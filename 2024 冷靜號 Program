#include <Servo.h>
#include <PS2X_lib.h>
#include <SPI.h>
#include <mcp2515.h>
#include <PID_v1.h>
#include <LiquidCrystal_I2C.h>
#include <VescUart.h>

//-------------------------------------------------Servo Motor Control-----------------------------------------------------------//
Servo motor;
Servo seedling_gripper_servo1;
Servo seedling_gripper_servo2;
Servo lift_loader_motor;
const int PWM_PIN = 6;

const int GRIPPER_SERVO1_PIN = 8;
const int GRIPPER_SERVO2_PIN = 9;


//-------------------------------------------------Relay Control Pins------------------------------------------------------------//
const int seedling_gripper_pin = 3;  // Seedling gripper relay
const int seedling_gripper_lifter_pin = 4;  // Seedling gripper lifter relay

//-------------------------------------------------PS2 Controller Related Stuff--------------------------------------------------//
#define PS2_CLK 13  // PS2 Controller Clock pin
#define PS2_DAT 12  // PS2 Controller Data pin
#define PS2_CMD 11  // PS2 Controller Command pin
#define PS2_SEL 10  // PS2 Controller Select pin

PS2X ps2x;
int error = 0;
byte vibrate = 0;
byte type = 0;

// Mode Constants
#define MOVING_MODE 0
#define SHOOTING_MODE 1
int currentMode = MOVING_MODE; // Initial mode is Moving Mode

//-------------------------------------------------CAN Bus Related Stuff---------------------------------------------------------//
struct can_frame canMsgIn;
struct can_frame canMsgOut;
MCP2515 mcp2515(53);
const int SPI_CS_PIN = 53;
const int CAN_INT_PIN = 2;

int motor_range = 100;
int motors_speed[] = { 0, 0, 0, 0 };
float speed_adjust = 0.2;

//-------------------------------------------------PID Related Stuff-------------------------------------------------------------//
double FL_Setpoint, FL_PID_Input, FL_PID_Output;
double FR_Setpoint, FR_PID_Input, FR_PID_Output;
double BL_Setpoint, BL_PID_Input, BL_PID_Output;
double BR_Setpoint, BR_PID_Input, BR_PID_Output;
double Kp = 130, Ki = 0, Kd = 1.5;

PID FL_pid(&FL_PID_Input, &FL_PID_Output, &FL_Setpoint, Kp, Ki, Kd, DIRECT);
PID FR_pid(&FR_PID_Input, &FR_PID_Output, &FR_Setpoint, Kp, Ki, Kd, REVERSE);
PID BL_pid(&BL_PID_Input, &BL_PID_Output, &BL_Setpoint, Kp, Ki, Kd, DIRECT);
PID BR_pid(&BR_PID_Input, &BR_PID_Output, &BR_Setpoint, Kp, Ki, Kd, REVERSE);

//-------------------------------------------------VESC Related Stuff------------------------------------------------------------//
VescUart VESC1;
VescUart VESC2;

//-------------------------------------------------PS2 Setup Function------------------------------------------------------------//
void ps2_setup() {
  error = ps2x.config_gamepad(PS2_CLK, PS2_CMD, PS2_SEL, PS2_DAT, true, true);
  if (error == 0) {
    Serial.println("Found Controller, configured successfully");
  } else {
    Serial.print("PS2 Controller Error: ");
    Serial.println(error);
  }
  type = ps2x.readType();
  switch (type) {
    case 0: Serial.println("Unknown Controller type"); break;
    case 1: Serial.println("DualShock Controller Found"); break;
    case 2: Serial.println("GuitarHero Controller Found"); break;
  }
}

//-------------------------------------------------CAN Bus Setup Function--------------------------------------------------------//
void can_mcp2515_setup() {
  mcp2515.reset();
  mcp2515.setBitrate(CAN_1000KBPS, MCP_8MHZ);
  mcp2515.setNormalMode();
}

//-------------------------------------------------PID Setup Function------------------------------------------------------------//
void pid_setup() {
  int pid_limit = 4096;
  FL_pid.SetMode(AUTOMATIC);
  FL_pid.SetOutputLimits(-pid_limit, pid_limit);
  FR_pid.SetMode(AUTOMATIC);
  FR_pid.SetOutputLimits(-pid_limit, pid_limit);
  BL_pid.SetMode(AUTOMATIC);
  BL_pid.SetOutputLimits(-pid_limit, pid_limit);
  BR_pid.SetMode(AUTOMATIC);
  BR_pid.SetOutputLimits(-pid_limit, pid_limit);
}

//-------------------------------------------------VESC Setup Function-----------------------------------------------------------//
void shooter_setup() {
  Serial1.begin(115200);
  Serial2.begin(115200);
  VESC1.setSerialPort(&Serial1);
  VESC2.setSerialPort(&Serial2);
}

//-------------------------------------------------CAN Write Function------------------------------------------------------------//
void can_write(String motor, int power) {
  int motor_write_address = 0;

  if (motor == "FL") motor_write_address = 0;
  else if (motor == "FR") motor_write_address = 2;
  else if (motor == "BL") motor_write_address = 4;
  else if (motor == "BR") motor_write_address = 6;

  canMsgOut.can_id = 0x200;
  canMsgOut.can_dlc = 8;
  canMsgOut.data[motor_write_address] = (power >> 8) & 0xFF;
  canMsgOut.data[motor_write_address + 1] = power & 0xFF;

  mcp2515.sendMessage(&canMsgOut);
}

//-------------------------------------------------CAN Read Speed Function-------------------------------------------------------//
void can_read_speed() {
  int single_motor_speed = 0;
  if (mcp2515.readMessage(&canMsgIn) == MCP2515::ERROR_OK) {
    if (canMsgIn.can_id == 0x201) motors_speed[0] = (canMsgIn.data[2] << 8) + canMsgIn.data[3];
    if (canMsgIn.can_id == 0x202) motors_speed[1] = (canMsgIn.data[2] << 8) + canMsgIn.data[3];
    if (canMsgIn.can_id == 0x203) motors_speed[2] = (canMsgIn.data[2] << 8) + canMsgIn.data[3];
    if (canMsgIn.can_id == 0x204) motors_speed[3] = (canMsgIn.data[2] << 8) + canMsgIn.data[3];
  }
}

//-------------------------------------------------PID Calculation Function------------------------------------------------------//
double pid_cal(int motor_id, double par_Setpoint, double par_PID_INPUT) {
  if (motor_id == 1) {
    FL_Setpoint = par_Setpoint;
    FL_PID_Input = par_PID_INPUT;
    FL_pid.Compute();
    return FL_PID_Output;
  } else if (motor_id == 2) {
    FR_Setpoint = par_Setpoint;
    FR_PID_Input = par_PID_INPUT;
    FR_pid.Compute();
    return FR_PID_Output;
  } else if (motor_id == 3) {
    BL_Setpoint = par_Setpoint;
    BL_PID_Input = par_PID_INPUT;
    BL_pid.Compute();
    return BL_PID_Output;
  } else if (motor_id == 4) {
    BR_Setpoint = par_Setpoint;
    BR_PID_Input = par_PID_INPUT;
    BR_pid.Compute();
    return BR_PID_Output;
  }
  return 0;
}

//-------------------------------------------------Move Motor Function-----------------------------------------------------------//
void move_motor(int joy_LX, int joy_LY, int joy_RX) {
  int joy_deadzone = 10;
  int speed_deadzone = 2;
  int forward = map(joy_LY, 0, 255, motor_range, -motor_range);
  int sideway = map(joy_LX, 0, 255, -motor_range, motor_range);
  int turn = map(joy_RX, 0, 255, motor_range, -motor_range) * 0.75;

  if (abs(forward) <= joy_deadzone) forward = 0;
  if (abs(sideway) <= joy_deadzone) sideway = 0;
  if (abs(turn) <= joy_deadzone) turn = 0;
  float pad_speed = 0.5;
  if (ps2x.Button(PSB_PAD_UP)) {
    
      Serial.println(motor_range);
      Serial.println(pad_speed);
      forward = motor_range * pad_speed;
      Serial.println("up button pressed");
      
      //Serial.println(forward);
    } else if (ps2x.Button(PSB_PAD_DOWN)) {
      forward = motor_range * -pad_speed;
      Serial.println("down button pressed");
    } else if (ps2x.Button(PSB_PAD_LEFT)) {
      sideway = motor_range * -pad_speed;
    } else if (ps2x.Button(PSB_PAD_RIGHT)) {
      sideway = motor_range * pad_speed;
    }
    
      //Serial.println(forward);
      
      //Serial.println(sideway);
  int FL_speed = constrain((forward + sideway - turn), -motor_range, motor_range);
  int FR_speed = constrain((forward - sideway + turn), -motor_range, motor_range);
  int BL_speed = constrain((forward - sideway - turn), -motor_range, motor_range);
  int BR_speed = constrain((forward + sideway + turn), -motor_range, motor_range);

  if (ps2x.ButtonPressed(PSB_L1) && speed_adjust > 0.1) speed_adjust -= 0.2;
  if (ps2x.ButtonPressed(PSB_R1) && speed_adjust < 1) speed_adjust += 0.2;

  FL_speed *= speed_adjust;
  FR_speed *= speed_adjust;
  BL_speed *= speed_adjust;
  BR_speed *= speed_adjust;

  if (abs(FL_speed) <= speed_deadzone) FL_speed = 0;
  if (abs(FR_speed) <= speed_deadzone) FR_speed = 0;
  if (abs(BL_speed) <= speed_deadzone) BL_speed = 0;
  if (abs(BR_speed) <= speed_deadzone) BR_speed = 0;

  can_read_speed();
  int FL_current_speed = map(motors_speed[0], -10000, 10000, -motor_range, motor_range);
  int FR_current_speed = map(motors_speed[1], -10000, 10000, -motor_range, motor_range);
  int BL_current_speed = map(motors_speed[2], -10000, 10000, -motor_range, motor_range);
  int BR_current_speed = map(motors_speed[3], -10000, 10000, -motor_range, motor_range);
  
  double FL_Power = pid_cal(1, FL_speed, FL_current_speed);
  double FR_Power = pid_cal(2, FR_speed, -FR_current_speed);
  double BL_Power = pid_cal(3, BL_speed, BL_current_speed);
  double BR_Power = pid_cal(4, BR_speed, -BR_current_speed);

  can_write("FL", int(FL_Power));
  can_write("FR", int(FR_Power));
  can_write("BL", int(BL_Power));
  can_write("BR", int(BR_Power));
}


//-------------------------------------------------Shooter Loop Function---------------------------------------------------------//
void shooter_loop() {
  static int lastInputValue1 = 10000;
  static int lastInputValue2 = 10000;
  ps2x.read_gamepad(false, vibrate);

/*  if (ps2x.Button(PSB_GREEN)) {
    lastInputValue1 = 10000;
    lastInputValue2 = 10000;
    Serial.println("Green button pressed: Setting RPM to 10000");
  } else if (ps2x.Button(PSB_BLUE)) {
    lastInputValue1 = -10000;
    lastInputValue2 = -10000;
    Serial.println("Blue button pressed: Setting RPM to -10000");
  } else {
    lastInputValue1 = 0;
    lastInputValue2 = 0;
    shooter_stop = 1;
    Serial.println("No button pressed: Stopping motors");
  }*/
  
  VESC1.setRPM(lastInputValue1);
  VESC2.setRPM(lastInputValue2);
  
  if (ps2x.Button(PSB_SQUARE)) { // Pink square button
    setMotorAngle(90);
  }

  if (ps2x.Button(PSB_CIRCLE)) { // Red circle button
    setMotorAngle(0);
  }
  move_motor(ps2x.Analog(PSS_LX), ps2x.Analog(PSS_LY), ps2x.Analog(PSS_RX));
  int arrow_pad_speed = 255/2*1;
}

//-------------------------------------------------Relay Control Function--------------------------------------------------------//
void controlRelays() {
  if (ps2x.ButtonPressed(PSB_CROSS)) { // Cross button to toggle seedling gripper relay
    digitalWrite(seedling_gripper_pin, !digitalRead(seedling_gripper_pin));
    delay(100); // Debounce delay
  }

  if (ps2x.ButtonPressed(PSB_TRIANGLE)) { // Triangle button to toggle seedling gripper lifter relay
    digitalWrite(seedling_gripper_lifter_pin, !digitalRead(seedling_gripper_lifter_pin));
    delay(100); // Debounce delay
  }
}

//-------------------------------------------------Servo Control Function--------------------------------------------------------//
void controlServos() {
  if (ps2x.ButtonPressed(PSB_L2)) { // L2 button to set servos to 0 degrees
    seedling_gripper_servo1.write(0);
    seedling_gripper_servo2.write(90);
  }
  if (ps2x.ButtonPressed(PSB_R2)) { // R2 button to set servos to 180 degrees
    seedling_gripper_servo1.write(90);
    seedling_gripper_servo2.write(0);
  }
}

//-------------------------------------------------Setup Function---------------------------------------------------------------//
void setup() {
  Serial.begin(115200);
  while (!Serial) continue; // Wait for serial connection to be established

  ps2_setup();
  can_mcp2515_setup();
  pid_setup();
  shooter_setup();

  motor.attach(PWM_PIN);
  motor.writeMicroseconds(1000);

  // Set relay pins as outputs
  pinMode(seedling_gripper_pin, OUTPUT);
  pinMode(seedling_gripper_lifter_pin, OUTPUT);

  // Initialize relays to LOW (OFF)
  digitalWrite(seedling_gripper_pin, LOW);
  digitalWrite(seedling_gripper_lifter_pin, LOW);

  // Attach servos
  seedling_gripper_servo1.attach(GRIPPER_SERVO1_PIN);
  seedling_gripper_servo2.attach(GRIPPER_SERVO2_PIN);

}

//-------------------------------------------------Set Motor Angle Function------------------------------------------------------//
void setMotorAngle(int angle) {
  int pulseWidth = map(angle, 0, 360, 1080, 1920);
  motor.writeMicroseconds(pulseWidth);
  Serial.print("Motor angle set to: ");
  Serial.println(angle);
}

//-------------------------------------------------Stop Motor Function-----------------------------------------------------------//
void stopMotor() {
  motor.writeMicroseconds(1500); // Set to neutral position (1500 μs)
}

//-------------------------------------------------Main Loop Function------------------------------------------------------------//
void loop() {
  ps2x.read_gamepad(false, vibrate);

  if (ps2x.ButtonPressed(PSB_SELECT)) {
    currentMode = (currentMode == MOVING_MODE) ? SHOOTING_MODE : MOVING_MODE;
    Serial.print("Mode switched to: ");
    Serial.println(currentMode == MOVING_MODE ? "Moving Mode" : "Shooting Mode");
  }

  if (currentMode == MOVING_MODE) {
    setMotorAngle(0);
    move_motor(ps2x.Analog(PSS_LX), ps2x.Analog(PSS_LY), ps2x.Analog(PSS_RX));
    int arrow_pad_speed = 255/2*1;
    
    
    controlRelays();
    controlServos();
    VESC1.setRPM(0);
    VESC2.setRPM(0);
  } else if (currentMode == SHOOTING_MODE) {
    seedling_gripper_servo1.write(90);
    seedling_gripper_servo2.write(0);
    shooter_loop();  
  }



  if (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n');
    if (input.startsWith("A")) {
      int angle = input.substring(1).toInt();
      if (angle < 0 || angle > 360) {
        Serial.println("Invalid angle. Please enter an angle between 0 and 360 degrees.");
        return;
      }
      setMotorAngle(angle);
    } else if (input.equals("D")) {
      stopMotor();
      Serial.println("Motor stopped.");
    } else {
      Serial.println("Invalid command. Use 'A' followed by angle or 'D' to stop the motor.");
    }
  }

  delay(10);
}
